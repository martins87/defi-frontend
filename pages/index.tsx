import { useEffect, useState } from 'react';
import Head from 'next/head'
import { useWeb3React, UnsupportedChainIdError, Web3ReactProvider } from '@web3-react/core';
import {
  NoEthereumProviderError,
  UserRejectedRequestError as UserRejectedRequestErrorInjected
} from '@web3-react/injected-connector'
import { Web3Provider } from '@ethersproject/providers';
import { ethers } from 'ethers';

import { injected } from '../connectors';
import { useEagerConnect, useInactiveListener } from '../hooks';
import styles from '../styles/Home.module.css'
import { Spinner } from './components/Spinner';
import { ERC20Service } from '../services/erc20';
import { DAI } from '../constants/contracts';
import { Account } from '../components/Account';
import { Balance } from '../components/Balance';
import { DaiBalance } from '../components/DaiBalance';
import Form from '../components/Form';

enum ConnectorNames {
  Injected = 'Injected'
}

const connectorsByName: { [connectorName in ConnectorNames]: any } = {
  [ConnectorNames.Injected]: injected
}

const erc20Abi = [
  'function allowance(address owner, address spender) external view returns (uint256)',
  'function approve(address spender, uint256 amount) external returns (bool)',
  'function balanceOf(address marketMaker) external view returns (uint256)',
  'function symbol() external view returns (string)',
  'function name() external view returns (string)',
  'function decimals() external view returns (uint8)',
  'function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)',
  'function transfer(address to, uint256 value) public returns (bool)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
]

const Home = () => {
  const context = useWeb3React<Web3Provider>();
  const { connector, library, chainId, account, activate, deactivate, active, error } = context;

  const daiInstance = new ethers.Contract(DAI, erc20Abi, library?.getSigner());
  // console.log('daiInstance:', daiInstance);

  // handle logic to recognize the connector currently being activated
  const [activatingConnector, setActivatingConnector] = useState<any>();
  useEffect(() => {
    if (activatingConnector && activatingConnector === connector) {
      setActivatingConnector(undefined);
    }
  }, [activatingConnector, connector]);

  // handle logic to eagerly connect to the ethereum provider, if it exists and has granted access already
  const triedEager = useEagerConnect();

  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists
  useInactiveListener(!triedEager || !!activatingConnector);

  // const { active, error } = useWeb3React()

  return (
    <div className={styles.container}>
      <Head>
        <title>DeFi Frontend</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>DeFi Frontend</h1>
      <div
        // style={{
        //   display: 'grid',
        //   gridGap: '1rem',
        //   gridTemplateColumns: '1fr 1fr',
        //   maxWidth: '20rem',
        //   margin: 'auto'
        // }}
      >
        {Object.keys(connectorsByName).map(name => {
          const currentConnector = connectorsByName[name]
          const activating = currentConnector === activatingConnector
          const connected = currentConnector === connector
          const disabled = !triedEager || !!activatingConnector || connected || !!error

          return (
            <button
              style={{
                height: '3rem',
                borderRadius: '1rem',
                borderColor: activating ? 'orange' : connected ? 'green' : 'unset',
                cursor: disabled ? 'unset' : 'pointer',
                position: 'relative'
              }}
              disabled={disabled}
              key={name}
              onClick={() => {
                setActivatingConnector(currentConnector)
                activate(connectorsByName[name])
              }}
            >
              <div
                style={{
                  position: 'absolute',
                  top: '0',
                  left: '0',
                  height: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  color: 'black',
                  margin: '0 0 0 1rem'
                }}
              >
                {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}
                {connected && (
                  <span role="img" aria-label="check">
                    ✅
                  </span>
                )}
              </div>
              {name}
            </button>
          )
        })}
      </div>

      <Account />
      <Balance />
      <DaiBalance instance={daiInstance} />
      <Form instance={daiInstance}/> 
    </div>
  )
}

export default Home;