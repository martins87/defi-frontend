import { useEffect, useState } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { useWeb3React, UnsupportedChainIdError, Web3ReactProvider } from '@web3-react/core';
import {
  NoEthereumProviderError,
  UserRejectedRequestError as UserRejectedRequestErrorInjected
} from '@web3-react/injected-connector'
import { Web3Provider } from '@ethersproject/providers';
import { formatEther } from '@ethersproject/units';

import { injected } from '../connectors';
import { useEagerConnect, useInactiveListener } from '../hooks';
import styles from '../styles/Home.module.css'
import { Spinner } from './components/Spinner';

enum ConnectorNames {
  Injected = 'Injected'
}

const connectorsByName: { [connectorName in ConnectorNames]: any } = {
  [ConnectorNames.Injected]: injected
}

const getLibrary = (provider: any): Web3Provider => {
  const library = new Web3Provider(provider);
  library.pollingInterval = 12000;
  return library;
}

const Account = () => {
  const { account } = useWeb3React()

  return (
      <>
          <span>Account</span>
          <span role="img" aria-label="robot">
              ðŸ¤–
    </span>
          <span>
              {account === null
                  ? '-'
                  : account
                      ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}`
                      : ''}
          </span>
      </>
  )
}

const Balance = () => {
  const { account, library, chainId } = useWeb3React()

  const [balance, setBalance] = useState();
  useEffect((): any => {
      if (!!account && !!library) {
          let stale = false

          library
              .getBalance(account)
              .then((balance: any) => {
                  if (!stale) {
                      setBalance(balance)
                  }
              })
              .catch(() => {
                  if (!stale) {
                      setBalance(null)
                  }
              })

          return () => {
              stale = true
              setBalance(undefined)
          }
      }
  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds

  return (
      <>
          <span>Balance</span>
          <span role="img" aria-label="gold">
              ðŸ’°
    </span>
          <span>{balance === null ? 'Error' : balance ? `Îž${formatEther(balance)}` : ''}</span>
      </>
  )
}

export default function Home() {
  const context = useWeb3React<Web3Provider>();
  const { connector, library, chainId, account, activate, deactivate, active, error } = context;

  // handle logic to recognize the connector currently being activated
  const [activatingConnector, setActivatingConnector] = useState<any>();
  useEffect(() => {
    if (activatingConnector && activatingConnector === connector) {
      setActivatingConnector(undefined);
    }
  }, [activatingConnector, connector]);

  // handle logic to eagerly connect to the ethereum provider, if it exists and has granted access already
  const triedEager = useEagerConnect();

  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists
  useInactiveListener(!triedEager || !!activatingConnector);

  // const { active, error } = useWeb3React()

  return (
    <div className={styles.container}>
      <Head>
        <title>DeFi Frontend</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>DeFi Frontend</h1>
      <Account />
      <Balance />

      <div
        style={{
          display: 'grid',
          gridGap: '1rem',
          gridTemplateColumns: '1fr 1fr',
          maxWidth: '20rem',
          margin: 'auto'
        }}
      >
        {Object.keys(connectorsByName).map(name => {
          const currentConnector = connectorsByName[name]
          const activating = currentConnector === activatingConnector
          const connected = currentConnector === connector
          const disabled = !triedEager || !!activatingConnector || connected || !!error

          return (
            <button
              style={{
                height: '3rem',
                borderRadius: '1rem',
                borderColor: activating ? 'orange' : connected ? 'green' : 'unset',
                cursor: disabled ? 'unset' : 'pointer',
                position: 'relative'
              }}
              disabled={disabled}
              key={name}
              onClick={() => {
                setActivatingConnector(currentConnector)
                activate(connectorsByName[name])
              }}
            >
              <div
                style={{
                  position: 'absolute',
                  top: '0',
                  left: '0',
                  height: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  color: 'black',
                  margin: '0 0 0 1rem'
                }}
              >
                {activating && <Spinner color={'black'} style={{ height: '25%', marginLeft: '-1rem' }} />}
                {connected && (
                  <span role="img" aria-label="check">
                    âœ…
                  </span>
                )}
              </div>
              {name}
            </button>
          )
        })}
      </div>
    </div>
  )
}
